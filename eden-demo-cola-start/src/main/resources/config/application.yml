spring:
  arthas:
    enabled: false # 默认关闭，请按需开启
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    hikari: # 数据源连接池组件
      connectionTimeout: 5000
      minimumIdle: 2
      maximumPoolSize: 10
      idleTimeout: 300000
      maxLifetime: 1200000
  #      connection-init-sql: SET NAMES utf8mb4 # 针对云数据库出现乱码的解决方案
  cloud:
    sentinel: # 流量治理组件
      enabled: false # 默认关闭，请按需开启
      http-method-specify: true # 兼容 RESTful
      eager: true # 立刻刷新到 Dashboard
  jackson: # 序列化组件
    date-format: yyyy-MM-dd HH:mm:ss
    default-property-inclusion: non_null
    serialization:
      indent-output: true
    time-zone: GMT+8
  liquibase: # 数据库迁移工具
    enabled: true # 默认关闭，请按需开启
  messages: # 国际化消息
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  lifecycle:
    timeout-per-shutdown-phase: 30s
  redis: # 缓存数据库
    lettuce:
      pool:
        min-idle: 1
        max-idle: 64
        max-active: 64
        max-wait: -1
  thymeleaf: # 模板引擎
    mode: HTML
    cache: true
  sleuth: # 链路跟踪框架
    sampler:
      probability: 1
    async:
      configurer:
        enabled: false # 与 Spring 高版本存在冲突，关闭处理
  zipkin: # 链路跟踪组件
    enabled: false # 默认关闭，请按需开启
    discovery-client-enabled: true
    locator:
      discovery:
        enabled: true
    sender:
      type: kafka
    kafka:
      topic: zipkin
  kafka: # 消息引擎组件
    client-id: ${spring.application.name}
    producer:
      acks: all # 发送确认机制
      batch-size: 4KB # 批处理发送主题大小
      buffer-memory: 40960 # 发送缓冲大小
      retries: 3 # 默认为 0，发送主题失败后重试的次数
      compression-type: lz4 # 压缩类型
    consumer:
      group-id: ${spring.application.name} # 消费组，同一个消费组的实例数或者线程数不能超过 Kafka 的分区数量
      enable-auto-commit: false # 建议关闭自动提交 Offset，不然报错很难处理
      auto-offset-reset: earliest # 设置消费者重连是否自动重置到最开始的消息偏移量
      heartbeat-interval: 5000 # 心跳频率
      max-poll-records: 100 # 单次拉取最大记录数
      fetch-max-wait: 3000 # 未达到 fetch-min-size 时，阻塞拉取消息的时长
      fetch-min-size: 4096 # 触发拉取消息的最小值
      isolation-level: READ_COMMITTED # 隔离级别：READ_UNCOMMITTED/READ_COMMITTED
    listener:
      type: BATCH # 监听类型：BATCH/SINGLE
      ack-mode: MANUAL_IMMEDIATE # 手动提交模式
      concurrency: 5 # 消费监听线程数，当配置值大于 Kafka 分区数，按分区数执行
      poll-timeout: 5000 # 单次拉取消息的超时时间
      idle-between-polls: 0 # 拉取消息的空闲时间
      idle-event-interval: 0 # 没有可消费的消息时空闲的间隔时间
  dynamic:
    tp: # 动态线程池
      enabled: false
      enabledBanner: false
      enabledCollect: true
      collectorTypes: micrometer
      logPath: ${user.home}/logs
      monitorInterval: 5
      undertowTp:
        corePoolSize: 16
        maximumPoolSize: 256
        keepAliveTime: 60
      dubboTp:
        - threadPoolName: ${spring.application.name}#dubboTp
          corePoolSize: 16
          maximumPoolSize: 256
          keepAliveTime: 60
      rocketMqTp:
        - threadPoolName: ${spring.application.name}#rocketMqTp
          corePoolSize: 16
          maximumPoolSize: 256
          keepAliveTime: 60
      executors:
        - threadPoolName: ${spring.application.name}#dtpExecutor
          executorType: common
          corePoolSize: 16
          maximumPoolSize: 256
          queueCapacity: 500
          queueType: VariableLinkedBlockingQueue
          rejectedHandlerType: CallerRunsPolicy

server:
  port: 8081
  shutdown: graceful # 优雅关闭
  compression:
    enabled: true # 开启压缩
    min-response-size: 1024
  undertow: # 高性能容器
    buffer-size: 1024
    direct-buffers: true
    threads:
      io: 16
      worker: 256
#  tomcat: # 传统容器
#    uri-encoding: UTF-8
#    max-connections: 8192 # 最大连接数
#    accept-count: 1000 # 接收队列长度
#    threads:
#      max: 500 # 最大并发数
#      min-spare: 20 # 初始线程数

management:
  server:
    port: 9081
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: ALWAYS
  metrics:
    tags:
      application: ${spring.application.name}
  health:
    dubbo:
      enabled: ${dubbo.enabled}

logging:
  access:
    enabled: true
    expression: within(org.ylzl.eden.demo.adapter.*.web..*)

liquibase: # 数据库迁移工具
  async: true # 异步执行

mybatis:
  plugin:
    sql-log:
      enabled: true
      slowness-threshold: 1s

mybatis-plus: # ORM 组件
  global-config:
    banner: false
  configuration:
    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl
    map-underscore-to-camel-case: true
    auto-mapping-behavior: full
    call-setters-on-nulls: true
    use-column-label: true
  type-aliases-package: org.ylzl.eden.demo.infrastructure

arthas: # 在线诊断工具
  agent-id: ${spring.application.name}@${random.value}
  tunnel-server: ws://localhost:7777/ws
  session-timeout: 1800
  telnet-port: 0 # 随机端口
  http-port: 0 # 随机端口

dubbo: # 分布式调用组件
  enabled: false # 默认关闭，请按需开启，请不要使用 @EnabledDubbo 原生注解，否则无法关闭
  scan:
    base-packages: org.ylzl.eden.demo.adapter # Dubbo 服务扫描
  application:
    id: ${spring.application.name}
  protocol:
    name: dubbo
    port: 20881 # 开发环境可以使用 -1 生成随机端口
  registry:
    id: ${spring.application.name}
    protocol: nacos
    address: nacos://${spring.cloud.nacos.discovery.server-addr}?namespace=${spring.cloud.nacos.discovery.namespace}&group=dubbo
    check: false # 是否开启服务注册的启动检查
    register: true # 是否开启服务注册，设置为 false 表示只订阅不注册
  metadata-report:
    address: nacos://${spring.cloud.nacos.discovery.server-addr}?namespace=${spring.cloud.nacos.discovery.namespace}&group=dubbo
  config-center:
    address: nacos://${spring.cloud.nacos.discovery.server-addr}
    namespace: ${spring.cloud.nacos.discovery.namespace}
    group: dubbo
    config-file: dubbo.properties
    app-config-file: while.properties
  service:
    shutdown:
      wait: 10000
  provider:
    retries: 0 # 重试次数
    timeout: 3000 # 超时时间
    check: false # 是否开启检查
    filter: cat-tracing
  consumer:
    retries: 0 # 重试次数
    timeout: 3000 # 超时时间
    check: false # 是否开启检查
    filter: cat-tracing,cat-consumer

rocketmq: # 消息队列
  enabled: false # 默认关闭，请按需开启
  producer:
    namespace: ${spring.profiles.active}
    group: ${spring.application.name}
    send-message-timeout: 3000 # 生产消息超时
    retry-times-when-send-failed: 2 # 同步模式生产消息失败重试次数
    retry-times-when-send-async-failed: 2 # 异步模式生产消息失败重试次数
  consumer:
    namespace: ${spring.profiles.active}
    group: ${spring.application.name}
    pull-batch-size: 500 # 单次拉取消息条数
    consume-message-batch-max-size: 100 # 单次消费消息条数
    consume-mode: CONCURRENTLY # CONCURRENTLY：并发模式，ORDERLY：顺序模式
    consume-thread-min: 8 # 消费最小线程数
    consume-thread-max: 64 # 消费最大线程数
    consume-timeout: 15 # 消费超时（分钟）
    suspend-current-queue-time-millis: 1000 # 顺序模式下消费者重试暂停的时间
    delay-level-when-next-consume: 0 # 并发模式下消费者重试频率，0：Broker 控制重试、-1：不重试直接进入死信、大于1：参考 Client 重试级别

xxl: # 分布式调度平台
  job:
    enabled: false # 默认关闭，请按需开启

cat: # 实时监控平台
  enabled: false # 默认关闭，请按需开启

opentracing: # Jaeger
  jaeger:
    service-name: ${spring.application.name}
    enabled: false
    log-spans: true
    enable-b3-propagation: true
    enable-w3c-propagation: true
    const-sampler:
      decision: true
    probabilistic-sampler:
      sampling-rate: 1
  spring:
    cloud:
      async:
        enabled: false

