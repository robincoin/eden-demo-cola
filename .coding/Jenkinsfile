pipeline {
  agent any
	environment {
	  MAVEN_SNAPSHOTS_NAME = "maven-snapshots"
		MAVEN_SNAPSHOTS_ID = "${CCI_CURRENT_TEAM}-${PROJECT_NAME}-${MAVEN_SNAPSHOTS_NAME}"
    MAVEN_SNAPSHOTS_URL = "${CCI_CURRENT_WEB_PROTOCOL}://${CCI_CURRENT_TEAM}-maven.pkg.${CCI_CURRENT_DOMAIN}/repository/${PROJECT_NAME}/${MAVEN_SNAPSHOTS_NAME}/"

	  MAVEN_RELEASES_NAME = "maven-releases"
		MAVEN_RELEASES_ID = "${CCI_CURRENT_TEAM}-${PROJECT_NAME}-${MAVEN_RELEASES_NAME}"
    MAVEN_RELEASES_URL = "${CCI_CURRENT_WEB_PROTOCOL}://${CCI_CURRENT_TEAM}-maven.pkg.${CCI_CURRENT_DOMAIN}/repository/${PROJECT_NAME}/${MAVEN_RELEASES_NAME}/"

	  MAVEN_SNAPSHOTS_NAME = "maven-snapshots"
	  MAVEN_RELEASES_NAME = "maven-releases"
	  DOCKER_REPOSITORY_NAME = "docker"
	  TCR_NAMESPACE = "py-tools"
	  JIB_BUILD_NAME = "eden-demo-cola-start"

		MAVEN_SNAPSHOTS_ID = "${CCI_CURRENT_TEAM}-${PROJECT_NAME}-${MAVEN_SNAPSHOTS_NAME}"
		MAVEN_SNAPSHOTS_URL = "${CCI_CURRENT_WEB_PROTOCOL}://${CCI_CURRENT_TEAM}-maven.pkg.${CCI_CURRENT_DOMAIN}/repository/${PROJECT_NAME}/${MAVEN_SNAPSHOTS_NAME}/"
		MAVEN_RELEASES_ID = "${CCI_CURRENT_TEAM}-${PROJECT_NAME}-${MAVEN_RELEASES_NAME}"
		MAVEN_RELEASES_URL = "${CCI_CURRENT_WEB_PROTOCOL}://${CCI_CURRENT_TEAM}-maven.pkg.${CCI_CURRENT_DOMAIN}/repository/${PROJECT_NAME}/${MAVEN_RELEASES_NAME}/"
	  DOCKER_REPOSITORY = "${CCI_CURRENT_TEAM}-docker.pkg.${CCI_CURRENT_DOMAIN}/${PROJECT_NAME}/${DOCKER_REPOSITORY_NAME}"
	  QCLOUD_TCR_REPOSITORY = "shjrccr.ccs.tencentyun.com/${TCR_NAMESPACE}/${DEPOT_NAME}"
	}
  stages {
    stage('检出') {
      steps {
        checkout([$class: 'GitSCM',
        branches: [[name: GIT_BUILD_REF]],
        userRemoteConfigs: [[
          url: GIT_REPO_URL,
          credentialsId: CREDENTIALS_ID
        ]]])
      }
    }
    stage('编译') {
      steps {
        script {
          if (env.TAG_NAME ==~ /.*/ ) {
	          ARTIFACT_VERSION = "${env.TAG_NAME}"
          } else if (env.MR_SOURCE_BRANCH ==~ /.*/ ) {
	          ARTIFACT_VERSION = "${env.MR_RESOURCE_ID}-${env.GIT_COMMIT_SHORT}"
          } else {
	          ARTIFACT_VERSION = "${env.BRANCH_NAME.replace('/', '-')}-${env.GIT_COMMIT_SHORT}"
          }
        }
        withCredentials([
					usernamePassword(
						credentialsId: env.MAVEN_RELEASES,
						usernameVariable: 'MAVEN_RELEASES_USERNAME',
						passwordVariable: 'MAVEN_RELEASES_PASSWORD'
					),
					usernamePassword(
						credentialsId: env.MAVEN_SNAPSHOTS,
						usernameVariable: 'MAVEN_SNAPSHOTS_USERNAME',
						passwordVariable: 'MAVEN_SNAPSHOTS_PASSWORD'
					)
				]) {
					withEnv([
						"ARTIFACT_VERSION=${ARTIFACT_VERSION}",
						"MAVEN_RELEASES_ID=${MAVEN_RELEASES_ID}",
						"MAVEN_RELEASES_URL=${MAVEN_RELEASES_URL}",
						"MAVEN_RELEASES_USERNAME=${MAVEN_RELEASES_USERNAME}",
						"MAVEN_RELEASES_PASSWORD=${MAVEN_RELEASES_PASSWORD}",
						"MAVEN_SNAPSHOTS_ID=${MAVEN_SNAPSHOTS_ID}",
						"MAVEN_SNAPSHOTS_URL=${MAVEN_SNAPSHOTS_URL}",
						"MAVEN_SNAPSHOTS_USERNAME=${MAVEN_SNAPSHOTS_USERNAME}",
						"MAVEN_SNAPSHOTS_PASSWORD=${MAVEN_SNAPSHOTS_PASSWORD}"
					]) {
						sh 'mvn -T 4C -U -Pcoding versions:set -DnewVersion=${ARTIFACT_VERSION} package -DskipTests -s ./.coding/settings.xml'
					}
				}
      }
    }
    stage('单元测试') {
			steps {
			  withCredentials([
					usernamePassword(
						credentialsId: env.MAVEN_RELEASES,
						usernameVariable: 'MAVEN_RELEASES_USERNAME',
						passwordVariable: 'MAVEN_RELEASES_PASSWORD'
					),
					usernamePassword(
						credentialsId: env.MAVEN_SNAPSHOTS,
						usernameVariable: 'MAVEN_SNAPSHOTS_USERNAME',
						passwordVariable: 'MAVEN_SNAPSHOTS_PASSWORD'
					)
				]) {
					withEnv([
						"MAVEN_RELEASES_ID=${MAVEN_RELEASES_ID}",
						"MAVEN_RELEASES_URL=${MAVEN_RELEASES_URL}",
						"MAVEN_RELEASES_USERNAME=${MAVEN_RELEASES_USERNAME}",
						"MAVEN_RELEASES_PASSWORD=${MAVEN_RELEASES_PASSWORD}",
						"MAVEN_SNAPSHOTS_ID=${MAVEN_SNAPSHOTS_ID}",
						"MAVEN_SNAPSHOTS_URL=${MAVEN_SNAPSHOTS_URL}",
						"MAVEN_SNAPSHOTS_USERNAME=${MAVEN_SNAPSHOTS_USERNAME}",
						"MAVEN_SNAPSHOTS_PASSWORD=${MAVEN_SNAPSHOTS_PASSWORD}"
					]) {
						sh 'mvn -T 4C -Pcoding,unit-test test -s ./.coding/settings.xml'
					}
				}
      }
			post {
				always {
					junit '**/surefire-reports/*.xml'
					codingHtmlReport(name: 'eden-demo-cola-adapter-jacoco-reports', tag: '代码覆盖率报告', path: 'eden-demo-cola-adapter/target/site/jacoco', entryFile: 'index.html')
					codingHtmlReport(name: 'eden-demo-cola-app-jacoco-reports', tag: '代码覆盖率报告', path: 'eden-demo-cola-app/target/site/jacoco', entryFile: 'index.html')
					codingHtmlReport(name: 'eden-demo-cola-infrastructure-jacoco-reports', tag: '代码覆盖率报告', path: 'eden-demo-cola-infrastructure/target/site/jacoco', entryFile: 'index.html')
        }
			}
    }
    stage('推送到 Maven 制品库') {
      steps {
        withCredentials([
					usernamePassword(
						credentialsId: env.MAVEN_RELEASES,
						usernameVariable: 'MAVEN_RELEASES_USERNAME',
						passwordVariable: 'MAVEN_RELEASES_PASSWORD'
					),
					usernamePassword(
						credentialsId: env.MAVEN_SNAPSHOTS,
						usernameVariable: 'MAVEN_SNAPSHOTS_USERNAME',
						passwordVariable: 'MAVEN_SNAPSHOTS_PASSWORD'
					)
				]) {
					withEnv([
						"MAVEN_RELEASES_ID=${MAVEN_RELEASES_ID}",
						"MAVEN_RELEASES_URL=${MAVEN_RELEASES_URL}",
						"MAVEN_RELEASES_USERNAME=${MAVEN_RELEASES_USERNAME}",
						"MAVEN_RELEASES_PASSWORD=${MAVEN_RELEASES_PASSWORD}",
						"MAVEN_SNAPSHOTS_ID=${MAVEN_SNAPSHOTS_ID}",
						"MAVEN_SNAPSHOTS_URL=${MAVEN_SNAPSHOTS_URL}",
						"MAVEN_SNAPSHOTS_USERNAME=${MAVEN_SNAPSHOTS_USERNAME}",
						"MAVEN_SNAPSHOTS_PASSWORD=${MAVEN_SNAPSHOTS_PASSWORD}"
					]) {
						sh 'mvn -T 4C -Pcoding deploy -DskipTests -s ./.coding/settings.xml'
					}
				}
      }
    }
    stage('推送到 Docker 制品库') {
			steps {
			  withCredentials([
					usernamePassword(
						credentialsId: env.DOCKER_REGISTRY_CREDENTIALS_ID,
						usernameVariable: 'DOCKER_USERNAME',
						passwordVariable: 'DOCKER_PASSWORD'
					)
				]) {
					withEnv([
						"DOCKER_USERNAME=${DOCKER_USERNAME}",
          	"DOCKER_PASSWORD=${DOCKER_PASSWORD}"
        	]) {
        		sh "docker login ${DOCKER_REPOSITORY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
        		sh "docker build -t ${DOCKER_REPOSITORY}/${DEPOT_NAME}:${ARTIFACT_VERSION} -f docker/Dockerfile ."
        		sh "docker push ${DOCKER_REPOSITORY}/${DEPOT_NAME}:${ARTIFACT_VERSION}"
        	}
        }
			}
		}
    // stage('推送到 Docker 制品库') {
    //   steps {
    //     withCredentials([
    //       usernamePassword(
    //         credentialsId: env.QCLOUD_TCR,
    //         usernameVariable: 'QCLOUD_TCR_USERNAME',
    //         passwordVariable: 'QCLOUD_TCR_PASSWORD'
    //       )
    //     ]) {
		// 			withEnv([
		// 				"DOCKER_USERNAME=${QCLOUD_TCR_USERNAME}",
		// 				"DOCKER_PASSWORD=${QCLOUD_TCR_PASSWORD}",
		// 				"DOCKER_IMAGE=${QCLOUD_TCR_REPOSITORY}:${ARTIFACT_VERSION}"
		// 			]) {
		// 				sh 'mvn -Pcoding -pl ${JIB_BUILD_NAME} jib:build -Djib.disableUpdateChecks=true -DskipTests -s ./.coding/settings.xml'
		// 			}
    //     }
    //   }
		// }
  }
}
